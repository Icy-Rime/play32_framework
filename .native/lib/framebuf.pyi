from typing import Optional, Union, Iterable

# micropython FrameBuffer adapt
MONO_VLSB: int
MONO_VMSB: int
RGB565: int
GS2_HMSB: int
GS4_HMSB: int
GS8: int
MONO_HLSB: int
MONO_HMSB: int

Color = int
class FrameBuffer(object):
    def __init__(self, buffer: Union[bytes, bytearray, memoryview, Iterable], width: int, height: int, format: int, stride: int = ...) -> None: ...
    def fill(self, c: Color) -> None: ...
    def pixel(self, x: int, y: int, c: Color = ...) -> Optional[Color]: ...
    def hline(self, x: int, y: int, w: int, c: Color) -> None: ...
    def vline(self, x: int, y: int, h: int, c: Color) -> None: ...
    def line(self, x1: int, y1: int, x2: int, y2: int, c: Color) -> None: ...
    def rect(self, x: int, y: int, w: int, h: int, c: Color) -> None: ...
    def fill_rect(self, x: int, y: int, w: int, h: int, c: Color) -> None: ...
    def blit(self, fbuf: FrameBuffer, x: int, y: int, key: Color = ...) -> None: ...
    def text(self, text: str, x: int, y: int, c: Color = ...) -> None: ...
    def scroll(self, xstep: int, ystep: int) -> None: ...
